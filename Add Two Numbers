# Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a
# single digit. Add the two numbers and return the sum as a linked list.
# You may assume the two numbers do not contain any leading zero, except the number 0 itself.

## Logic:
## We recursively traverse our linked list to obtain the number stored inside.
## We add the two numbers
## Create a new linked list, storing our new total inside.

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def add_two_nums(l1, l2):
    def get_num(node, num):
        if not node:
            return 0
        else:
            num = get_num(node.next, num) * 10 + node.val 
        return num

    total = get_num(l1, 0) + get_num(l2, 0)
    
    new_sum = ListNode()
    if total == 0:
        return new_sum
    
    def create_number(node, number):
        if number == 0:
            return
        node.next = ListNode(number % 10)
        return create_number(node.next, number // 10)
    
    create_number(new_sum, total)
    return new_sum.next
